/* CSS layout for a desktop screen size */

body {
	background-color: lightgrey;
}

.center {
	text-align: center;
}


.plane-background {
	background-color: white;
}

nav {
	text-align: center;
	border: 5px solid black;
	background-color: white;
}

nav > a{
	margin-right: 20px;
	vertical-align: middle;

	/* transition for when you are going to hover over an anchor element in nav */
	transition-property: background-color;
	transition-duration: 1.0s;
	transition-timing-function: ease-out;
	transition-delay: 0s;
}

a:hover {
	background-color: magenta;
}

figure {
	border: 8px solid darkgray;
	align-items: center;
	width: 300px;
}

figure > img {
	width: 300px;
	height: 300px;
}

/* layout using grid. This grid will get us rows that contain 3 columns */
.grid-container {
  display: grid;
  grid-template-columns: auto auto auto;
	text-align: center;
	grid-row-gap: 10px;
	column-gap: 10px;
}

/* grid container for rows that have two columns */
.grid-container-half {
  display: grid;
  grid-template-columns: auto auto;
	text-align: center;
	grid-row-gap: 10px;
	column-gap: 10px;
}


/* targets any figure tag that is used in the grid container. Implements flex */
.grid-container > figure{
	display: flex;
	flex-direction: column;
	text-align: center;
	margin: auto;
	background-color: aqua;
}

.grid-container-half > figure{
	display: flex;
	flex-direction: column;
	text-align: center;
	margin: auto;
	background-color: aqua;
}

figure > button {
	width: 100%;
}

/* Ball back and forth animation */
.animation-back-forth {
	width: 25px;
	height: 25px;
	background-image: url(ball.png);
	background-color: white;
	position: relative;
	animation-name: back-and-forth;
	animation-duration: 5s;
	animation-iteration-count: infinite	;
	animation-timing-function: ease-out;
}

/* makes the tennis ball go to the right hand side of the screen
half way through the animation, then return to the left side */
@keyframes back-and-forth {
	0% {left: 0%;}
	50% {left: 98%;}
	100% {left: 0%;}
}


/* css to target the table element to have a solid border */
table, th, td {
	border: 1px solid;
	padding: 3px;
	text-align: center;
}

/* grid for input and label in a form. This way we can have multiple elements of the form side by side */
.form-grid {
	display: grid;
  grid-template-columns: 17.5% 17.5% 17.5% 17.5%;
	grid-row-gap: 10px;
	column-gap: 10px;
}

/* grid to split the screen on the checkout page */
/* This way we can get the items the user has displayed next to their billing form */
.split-grid {
	display: grid;
	grid-template-columns: 70% 30%;
}

table {
	margin-top: 125px;
}

.fancy-button {
	margin: 4px;
	padding: 5px;
	color: white;
	width: 100px;
	cursor: pointer;
	border-radius: 2px;
	background-color: darkblue;
}

.fancy-button-double {
	margin: 4px;
	padding: 5px;
	color: white;
	width: 211px;
	cursor: pointer;
	border-radius: 2px;
	background-color: darkblue;
}

/* 
  Need this for when the screen would be small enough for some of the grid layout
	to overlap with itself but not small enough to where the screen would change to
	the tablet.css layout.
	This just makes it so instead of 3 columns per row in the grid, there are only 2.
	This adds responsive design so the page remains looking nice when shrunk
	Note: We still have other CSS files for mobile screens and tablet screens. This was just
	an exeption that was come across
 */
@media only screen and (max-width: 1000px) and (min-width: 769px) {
	.grid-container {
		display: grid;
		grid-template-columns: auto auto;
		text-align: center;
		grid-row-gap: 10px;
		column-gap: 10px;
	}
}
